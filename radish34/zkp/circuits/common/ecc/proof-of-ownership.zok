import "ecc/edwardsAdd" as add
import "ecc/edwardsScalarMult" as multiply

/// Slightly modified version of the standard library's version. This sk is passed in as 256-bits.


/// Verifies match of a given public/private keypair.
///
///    Checks if the following equation holds for the provided keypair:
///    pk = sk*G
///    where G is the chosen base point of the subgroup
///    and * denotes scalar multiplication in the subgroup
///
/// Arguments:
///    pk: Curve point. Public key.
///    sk: Field[256] - bits. Private key.
///    context: Curve parameters (including generator G) used to create keypair.
///
/// Returns:
///     Return 1 for pk/sk being a valid keypair, 0 otherwise.
def main(field[2] pk, field[256] skBits, field[10] context) -> (field):

    field[2] G = [context[4], context[5]]

    field[2] ptExp = multiply(skBits, G, context)

    field out =	if ptExp[0] == pk[0] && ptExp[1] == pk[1] then 1 else 0 fi

    return out
