import "utils/pack/pack128" as pack128
import "utils/pack/unpack128.zok" as unpack128
import "utils/pack/nonStrictUnpack256.zok" as unpack256
import "../common/packing/unpack2x128To256x1.zok" as unpack2x128To256x1

import "../common/hashes/sha256/sha256of4x128.zok" as sha256of4x128
import "../common/hashes/sha256/sha256of7x128.zok" as sha256of7x128
import "../common/hashes/sha256/sha256of8x128.zok" as sha256of8x128
import "../common/hashes/sha256/sha256of12x128.zok" as sha256of12x128
import "../common/hashes/sha256/sha256of15x128.zok" as sha256of15x128

import "../common/merkle-tree/calc-root-from-siblingPath-sha256-height4.zok" as calculateRoot
import "./calculate-amount-owed.zok" as calculateAmountOwed

import "../common/ecc/proof-of-ownership.zok" as proofOfOwnership
import "../common/ecc/edwards-compress.zok" as edwardsCompress
import "../common/ecc/verify-eddsa.zok" as verifyEddsa
import "ecc/babyjubjubParams.zok" as context

struct OldMSAConstants {
  field[2] publicKeyOfBuyer
  field[2] publicKeyOfSupplier
  field[4] tierBounds
  field[3] pricesByTier
  field[2] hashOfTieredPricing
  field minVolume
  field maxVolume
  field sku
  field[2] erc20ContractAddress
}

struct NewMSAConstants {
  field[2] publicKeyOfBuyer
  field[2] publicKeyOfSupplier
  field[2] hashOfTieredPricing
  field minVolume
  field maxVolume
  field sku
  field[2] erc20ContractAddress
}

struct MSAVariables {
  field accumulatedVolumeOrdered
  field accumulatedVolumeDelivered
}

struct OldCommitment {
  field[2] value
  field[2] salt
  field index // only used when spending a commitment
  field[2] nullifier // only used when spending a commitment
  field[4] siblingPath // only used when spending a commitment
}

struct NewCommitment {
  field[2] value
  field[2] salt
}

struct OldMSA {
  OldMSAConstants constants
  MSAVariables variables
  OldCommitment commitment
}

struct NewMSA {
  NewMSAConstants constants
  MSAVariables variables
  NewCommitment commitment
}

struct POConstants {
  field[2] publicKeyOfBuyer
  field[2] publicKeyOfSupplier
  field volume
  field price
  field sku
  field[2] erc20ContractAddress
}

struct POVariables {
  field accumulatedVolumeDelivered
}

struct NewPO {
  POConstants constants
  POVariables variables
  NewCommitment commitment
}

def main(field publicInputHash, private field[2] secretKeyOfBuyer, private field[2] root, private OldMSA oldMSA, private NewMSA newMSA, private NewPO newPO) -> ():

  // Ensure constants are preserved between commitments:
  oldMSA.constants.publicKeyOfBuyer == newMSA.constants.publicKeyOfBuyer
  oldMSA.constants.publicKeyOfSupplier == newMSA.constants.publicKeyOfSupplier
  oldMSA.constants.hashOfTieredPricing == newMSA.constants.hashOfTieredPricing
  oldMSA.constants.minVolume == newMSA.constants.minVolume
  oldMSA.constants.maxVolume == newMSA.constants.maxVolume
  oldMSA.constants.sku == newMSA.constants.sku
  oldMSA.constants.erc20ContractAddress == newMSA.constants.erc20ContractAddress

  newPO.constants.publicKeyOfBuyer == oldMSA.constants.publicKeyOfBuyer
  newPO.constants.publicKeyOfSupplier == oldMSA.constants.publicKeyOfSupplier
  newPO.constants.sku == oldMSA.constants.sku
  newPO.constants.erc20ContractAddress == oldMSA.constants.erc20ContractAddress


  // Permission:
  secretKeyOfBuyerBits = unpack2x128To256x1(secretKeyOfBuyer)
  1 == proofOfOwnership(oldMSA.constants.publicKeyOfBuyer, secretKeyOfBuyerBits, context())


  // compressing public keys of type point (X,Y)
  field[256] publicKeyOfBuyerCompressed = edwardsCompress(newMSA.constants.publicKeyOfBuyer)
  field[256] publicKeyOfSupplierCompressed = edwardsCompress(newMSA.constants.publicKeyOfSupplier)

  // formatting public keys to pass as 128 bit field elements to sha256
  // TODO: find a way of not using the constraint-heavy 'pack' function.
  field publicKeyOfBuyerCompressed1 = pack128(publicKeyOfBuyerCompressed[0..128])
  field publicKeyOfBuyerCompressed2 = pack128(publicKeyOfBuyerCompressed[128..256])
  field publicKeyOfSupplierCompressed1 = pack128(publicKeyOfSupplierCompressed[0..128])
  field publicKeyOfSupplierCompressed2 = pack128(publicKeyOfSupplierCompressed[128..256])


  // Proof that the Buyer is indeed the Buyer for this MSA (by recalculating the MSA commitment):
  oldMSACommitmentBits = unpack2x128To256x1(oldMSA.commitment.value)
  oldMSACommitmentBits == sha256of15x128([publicKeyOfBuyerCompressed1, publicKeyOfBuyerCompressed2, publicKeyOfSupplierCompressed1, publicKeyOfSupplierCompressed2, ...oldMSA.constants.hashOfTieredPricing, oldMSA.constants.minVolume, oldMSA.constants.maxVolume, oldMSA.constants.sku, ...oldMSA.constants.erc20ContractAddress, oldMSA.variables.accumulatedVolumeOrdered, oldMSA.variables.accumulatedVolumeDelivered, ...oldMSA.commitment.salt])


  // Proof that the oldMSACommitment exists on-chain:
  rootBits = unpack2x128To256x1(root)
  rootBits == calculateRoot(oldMSA.commitment.siblingPath, oldMSA.commitment.value, oldMSA.commitment.index)


  // Nullify the oldMSACommitment:
  oldMSANullifierBits = unpack2x128To256x1(oldMSA.commitment.nullifier)
  oldMSANullifierBits == sha256of4x128([...oldMSA.commitment.value, ...oldMSA.commitment.salt])


  // Instantiate new PO variables as 0
  newPO.variables.accumulatedVolumeDelivered == 0


  // Check the volume being ordered is valid:
  (newPO.constants.volume + oldMSA.variables.accumulatedVolumeOrdered > oldMSA.constants.minVolume) == true

  (newPO.constants.volume < oldMSA.constants.maxVolume - oldMSA.variables.accumulatedVolumeOrdered) == true


  // Check the updates to private variables:
  newMSA.variables.accumulatedVolumeOrdered == oldMSA.variables.accumulatedVolumeOrdered + newPO.constants.volume

  newMSA.variables.accumulatedVolumeDelivered == oldMSA.variables.accumulatedVolumeDelivered // ensure value is preserved


  // Check that the price has been calculated correctly:
  newPO.constants.price == calculateAmountOwed(oldMSA.constants.tierBounds, oldMSA.constants.pricesByTier, oldMSA.variables.accumulatedVolumeOrdered, newPO.constants.volume, newMSA.variables.accumulatedVolumeOrdered)


  // Check that the tiers for the price calculation actually adhere to the MSA:
  hashOfTieredPricingBits = unpack2x128To256x1(oldMSA.constants.hashOfTieredPricing)
  hashOfTieredPricingBits == sha256of7x128([...oldMSA.constants.tierBounds, ...oldMSA.constants.pricesByTier])


  // Check the new commitments:
  newMSACommitmentBits = unpack2x128To256x1(newMSA.commitment.value)
  newMSACommitmentBits == sha256of15x128([publicKeyOfBuyerCompressed1, publicKeyOfBuyerCompressed2, publicKeyOfSupplierCompressed1, publicKeyOfSupplierCompressed2, ...newMSA.constants.hashOfTieredPricing, newMSA.constants.minVolume, newMSA.constants.maxVolume, newMSA.constants.sku, ...newMSA.constants.erc20ContractAddress, newMSA.variables.accumulatedVolumeOrdered, newMSA.variables.accumulatedVolumeDelivered, ...newMSA.commitment.salt])

  newPOCommitmentBits = unpack2x128To256x1(newPO.commitment.value)
  newPOCommitmentBits == sha256of12x128([publicKeyOfBuyerCompressed1, publicKeyOfBuyerCompressed2, publicKeyOfSupplierCompressed1, publicKeyOfSupplierCompressed2, newPO.constants.volume, newPO.constants.price, newPO.constants.sku, ...newPO.constants.erc20ContractAddress, newPO.variables.accumulatedVolumeDelivered, ...newPO.commitment.salt])


  // Check the publicInputHash:
  publicInputHashBits = unpack256(publicInputHash)
  publicInputHashBitsCheck = sha256of8x128([...root, ...oldMSA.commitment.nullifier, ...newMSA.commitment.value, ...newPO.commitment.value])
  publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]

  return
