import "../common/packing/unpack2x128To256x1" as unpack2x128To256x1

import "../common/hashes/sha256/sha256of7x128.zok" as sha256of7x128

// ABOUT

// Suppose there is a volume-price agreement as follows:
//
// |    Volume Tiers     | Price |
// |---------------------|-------|
// | v0 <= volume <  v1  |  p0   |
// | v0 <= volume <  v1  |  p1   |
// | v0 <= volume <  v1  |  p2   |
//
// Convert this table into vectors:
//
// volumeTierBounds = [ v0, v1, v2, v3 ]
//
// pricesByTier = [ p0, p1, p2 ]
//
//
// This file checks the following:
//   - minVolume == volumeTierBounds[0]
//   - at least 1 interval exists in the volumeTierBounds
//   - the tier bounds are strictly ascending
//   - unused tier bounds are all zero
//   - maxVolume is the last nonzero element of the volumeTierBounds


// TODO: are we doing enough to avoid any 'negative number', 'underflow' attacks?
def main(private field[4] volumeTierBounds, private field[3] pricesByTier, private field[2] hashOfTieredPricing, private field minVolume, private field maxVolume) -> (field):

    // Ensure the hashOfTieredPricing is actually the hash of the purported tier pricing structure:
    hashOfTieredPricingBits = unpack2x128To256x1(hashOfTieredPricing)
    hashOfTieredPricingBits == sha256of7x128([...volumeTierBounds, ...pricesByTier])

    // Check the minVolume is correct:
    minVolume == volumeTierBounds[0]

    // VALID volumeTierBounds array formatting:
    // [0, 5, 0, 0]
    // [0, 5, 10, 15]
    // [5, 10, 15, 20]
    // [5, 10, 0, 0]
    // [5, 10, 15, 0]
    // INVALID volumeTierBounds array formatting:
    // [5, 0, 0, 0] X      (because there is no first interval)
    // [0, 0, 0, 0] X      (because there are no intervals)
    // [5, 10, 0, 15] X    (because there's a nonzero after a zero)
    // [0, 0, 10, 15] X    (because not strictly ascending)
    // [5, 0, 10, 15] X    (because no first interval & there's a nonzero after a zero)
    // [10, 5, 0, 0] X     (because not strictly ascending)
    // [20, 15, 10, 10] X  (because not strictly ascending)
    // [5, 10, 15, 15] X   (because not strictly ascending)
    // [5, 10, 15, 10] X   (because not strictly ascending)

    // Important edge case to ensure at least 1 interval exists:
    (volumeTierBounds[1] == 0) == false

    field maxVolumeIndex = 0
    bool wasZero = false
    field zeroCount = if minVolume == 0 then 1 else 0 fi
    // Cycle through indices of volumeTierBounds (ignoring the 0th index; because that's allowed to be 0)
    for field i in 1..4 do
        bool isZero = if volumeTierBounds[i] == 0 then true else false fi
        // zeroCount is used to prevent ALL tier bounds from being zero:
        zeroCount = if isZero then zeroCount + 1 else zeroCount fi

        // If we find a nonzero value, after having already found a zero, then the tier bounds are badly formatted:
        bool unexpectedNonZero = if wasZero && !isZero then true else false fi
        unexpectedNonZero == false

        // Find the maxVolume (it might not be the last element of the volumeTierBounds array) - it's the left-most nonzero element of the array.
        // When we find a '0' element of volumeTierBounds, then the prior element must be the maxVolume:
        maxVolumeIndex = if isZero then maxVolumeIndex else i fi
        wasZero = isZero

        // Ensure nonzero tier bounds are strictly ascending:
        bool strictlyAscending = if !isZero && volumeTierBounds[i] <= volumeTierBounds[i - 1] then false else true fi
        strictlyAscending == true
    endfor

    // Prevent ALL tier bounds from being zero:
    (zeroCount == 4) == false
    // Check the maxVolume is correct:
    maxVolume == volumeTierBounds[maxVolumeIndex]

    return 1
