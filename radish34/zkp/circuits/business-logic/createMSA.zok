import "utils/pack/pack128" as pack128
import "utils/pack/nonStrictUnpack256.zok" as unpack256
import "../common/packing/unpack2x128To256x1" as unpack2x128To256x1

import "../common/hashes/sha256/sha256of2x128.zok" as sha256of2x128
import "../common/hashes/sha256/sha256of15x128.zok" as sha256of15x128

import "../common/ecc/edwards-compress.zok" as edwardsCompress
import "../common/ecc/verify-eddsa.zok" as verifyEddsa
import "ecc/babyjubjubParams.code" as context

import "./check-tiering-structure.zok" as checkTieringStructure

struct EdDSASignature {
  field[2] R
  field S
}

struct MSAConstants {
  field[2] publicKeyOfBuyer
  field[2] publicKeyOfSupplier
  field[4] tierBounds
  field[3] pricesByTier
  field[2] hashOfTieredPricing
  field minVolume
  field maxVolume
  field sku
  field[2] erc20ContractAddress
  EdDSASignature buyerSignature
  EdDSASignature supplierSignature
}

struct MSAVariables {
  field accumulatedVolumeOrdered
  field accumulatedVolumeDelivered
}

struct NewCommitment {
  field[2] value
  field[2] salt
}

struct NewMSA {
  MSAConstants constants
  MSAVariables variables
  NewCommitment commitment
}

def main(field publicInputHash, private NewMSA newMSA) -> ():


  // compressing public keys of type point (X,Y)
  field[256] publicKeyOfBuyerCompressed = edwardsCompress(newMSA.constants.publicKeyOfBuyer)
  field[256] publicKeyOfSupplierCompressed = edwardsCompress(newMSA.constants.publicKeyOfSupplier)


  // formatting public keys to pass as 128 bit field elements to sha256
  // TODO: find a way of not using the constraint-heavy 'pack' function.
  field publicKeyOfBuyerCompressed1 = pack128(publicKeyOfBuyerCompressed[0..128])
  field publicKeyOfBuyerCompressed2 = pack128(publicKeyOfBuyerCompressed[128..256])
  field publicKeyOfSupplierCompressed1 = pack128(publicKeyOfSupplierCompressed[0..128])
  field publicKeyOfSupplierCompressed2 = pack128(publicKeyOfSupplierCompressed[128..256])


  // Instantiate new MSA variables as 0
  newMSA.variables.accumulatedVolumeDelivered == 0
  newMSA.variables.accumulatedVolumeOrdered == 0


  // Proof that the Buyer is indeed the Buyer for this MSA (by recalculating the MSA commitment):
  newMSACommitmentBits = unpack2x128To256x1(newMSA.commitment.value)
  newMSACommitmentBitsCheck = sha256of15x128([publicKeyOfBuyerCompressed1, publicKeyOfBuyerCompressed2, publicKeyOfSupplierCompressed1, publicKeyOfSupplierCompressed2, ...newMSA.constants.hashOfTieredPricing, newMSA.constants.minVolume, newMSA.constants.maxVolume, newMSA.constants.sku, ...newMSA.constants.erc20ContractAddress, newMSA.variables.accumulatedVolumeOrdered, newMSA.variables.accumulatedVolumeDelivered, ...newMSA.commitment.salt])

  newMSACommitmentBits == newMSACommitmentBitsCheck

  // VERIFY SIGNATURES
  context = context()

  field isVerifiedBuyer = verifyEddsa(newMSA.constants.buyerSignature.R, newMSA.constants.buyerSignature.S, newMSA.constants.publicKeyOfBuyer, newMSACommitmentBits, context)
  field isVerifiedSupplier = verifyEddsa(newMSA.constants.supplierSignature.R,  newMSA.constants.supplierSignature.S, newMSA.constants.publicKeyOfSupplier, newMSACommitmentBits, context)
  isVerifiedBuyer == 1
  isVerifiedSupplier == 1


  // CHECK TIERING STRUCTURE:
  1 == checkTieringStructure(newMSA.constants.tierBounds, newMSA.constants.pricesByTier, newMSA.constants.hashOfTieredPricing, newMSA.constants.minVolume, newMSA.constants.maxVolume)


  // Check the publicInputHash:
  publicInputHashBits = unpack256(publicInputHash)
  publicInputHashBitsCheck = sha256of2x128(newMSA.commitment.value)
  publicInputHashBits[8..256] == publicInputHashBitsCheck[8..256]

  return
