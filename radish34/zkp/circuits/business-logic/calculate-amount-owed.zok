// ABOUT

// Suppose there is a volume-price agreement as follows:
//
// |    Volume Tiers     | Price |
// |---------------------|-------|
// | v0 <= volume <  v1  |  p0   |
// | v0 <= volume <  v1  |  p1   |
// | v0 <= volume <  v1  |  p2   |
//
// Convert this table into vectors:
//
// volumeTierBounds = [ v0, v1, v2, v3 ]
//
// pricesByTier = [ p0, p1, p2 ]
//
//
// Suppose a Supplier sends a volume = thisVolume of some widget (which might span multiple volume tiers).
//
// And suppose the Supplier wants to PROVE that they're owed an amount = amountOwed
//
// Then this file checks the correctness of amountOwed, for a given tiering structure.


// IMPORTS


// MAIN

// @return {field} amountOwed

def main(private field[4] volumeTierBounds, private field[3] pricesByTier, private field oldCumulativeVolume, private field thisVolume, private field newCumulativeVolume) -> (field):

  field[3] lowerBoundForTier = [0, 0, 0]
  field[3] upperBoundForTier = [0, 0, 0]

  newCumulativeVolume == oldCumulativeVolume + thisVolume

  for field i in 0..3 do
    // Create the upper and lower bounds for each tier:
    lowerBoundForTier[i] = if oldCumulativeVolume >= volumeTierBounds[i] then oldCumulativeVolume else volumeTierBounds[i] fi
    lowerBoundForTier[i] = if oldCumulativeVolume <= volumeTierBounds[i + 1] then lowerBoundForTier[i] else volumeTierBounds[i + 1] fi

    upperBoundForTier[i] = if newCumulativeVolume <= volumeTierBounds[i + 1] then newCumulativeVolume else volumeTierBounds[i + 1] fi
    upperBoundForTier[i] = if newCumulativeVolume >= volumeTierBounds[i] then upperBoundForTier[i] else volumeTierBounds[i] fi
  endfor

  field amountOwed = 0
  for field i in 0..3 do
    // Calculate the amountOwed for this tier:
    amountOwed = amountOwed + pricesByTier[i] * (upperBoundForTier[i] - lowerBoundForTier[i])
  endfor

  return amountOwed
